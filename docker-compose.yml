version: '3.8'

services:
  api-service:
    build:
      context: ./backend/apps/api-service
      dockerfile: Dockerfile
      args:
        - ENV=production
    container_name: api-service
    restart: unless-stopped
    ports:
      - "${API_PORT:-8001}:8000"
    depends_on:
      search-service:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - SEARCH_SERVICE_URL=http://search-service:8000
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - API_WORKERS=${API_WORKERS:-4}
    networks:
      - search-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    volumes:
      - api-logs:/app/logs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.localhost`)"
      - "service.name=api-service"
      - "service.version=1.0.0"

  search-service:
    build:
      context: ./backend/apps/search-service
      dockerfile: Dockerfile
      args:
        - ENV=production
    container_name: search-service
    restart: unless-stopped
    ports:
      - "${SEARCH_PORT:-8002}:8000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - SEARCH_INDEX_PATH=/app/data/index
      - SEARCH_CACHE_SIZE=${SEARCH_CACHE_SIZE:-1000}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - SEARCH_WORKERS=${SEARCH_WORKERS:-2}
    networks:
      - search-net
    volumes:
      - search-data:/app/data
      - search-logs:/app/logs
      - search-cache:/app/cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    labels:
      - "traefik.enable=false"
      - "service.name=search-service"
      - "service.version=1.0.0"

  # Optional: Add monitoring services
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - search-net
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - search-net
    profiles:
      - monitoring

networks:
  search-net:
    driver: bridge
    name: search-network
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  search-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/search
  search-logs:
    driver: local
  search-cache:
    driver: local
  api-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
